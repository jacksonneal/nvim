===============================================================================
                                                              *cur_ln_dx.nvim*

Enables virtual text diagnostics on your current cursor line.

  Call setup, configure with your LSP `on_attach`: >

    local cur_ln_dx = require("jax.cur_ln_dx")
    cur_ln_dx.setup({ is_enabled = true })

    lspconfig.lua_ls.setup({
      on_attach = function(_, bufnr)
        cur_ln_dx.on_attach_dx(bufnr)
      end,
      ...
    })
<


                                                                *cur_ln_dx.ns*
cur_ln_dx.ns

  Namespace for current line virtual text.

                                                            *cur_ln_dx.hide()*
cur_ln_dx.hide({bufnr})

  Hide current line diagnostic virtual text.

  {bufnr} integer - to hide diagnostics for

                                                            *cur_ln_dx.show()*
cur_ln_dx.show({bufnr})

  Show current line diagnostic virtual text.

  {bufnr} integer - to show diagnostics for

                                                           *cur_ln_dx.augroup*
cur_ln_dx.augroup

  Autocommand group for current line virtual text.

                                           *cur_ln_dx.on_attach_diagnostics()*
cur_ln_dx.on_attach_dx({bufnr})

  Configure autocommands for current line virtual text for the given buffer.

  {bufnr} integer - to configure autocommands for


                                                           *cur_ln_dx.setup()*
cur_ln_dx.setup({opts})

  Setup plugin with options.

  {opts} CurLnDxOpts - to configure plugin


 vim:ft=help:cole=0:
